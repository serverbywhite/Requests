# -*- coding: utf-8 -*-
#!/usr/bin/env python3
__ùë®ùëºùëªùú¢ùú™ùëπ__ = ["ùëæùëØùë∞ùëªùë¨ ùëµùëµ √ó ùë±ùëºùëµùë∞ùë´ùë∂ ùë≤ùë®ùë∞ √ó ùë¥ùë∞ùëµùëØùë®ùëµùëØùë∫"]
__ùëºùë∫ùë¨ùëπ__ = ["Shin"]
__ùë¨ùú®ùë™__ = ["Shadow"]
__ùë¥ùë∂ùë´ùë¨__ = ["ùë∂ùë©ùë≠ √ó ùë¨ùëµùë™"]
__ùëΩùë¨ùëπùë∫ùë∞ùë∂ùëµ__ = ["242.26.711"]
__ùëæùíÇùíìùíèùíäùíèùíà__ = ["ENC n√†y kh√¥ng h·ªó tr·ª£ m·∫°nh ch·ªâ d√πng cho backend khuy·∫øn c√°o l√™n s√†i ENC ùôãùôÆùôàùôñùôÜùôñùôûùôØùô™"]
__ùëæùíÇùíìùíèùíäùíèùíà__ = ["T·ª´ ch·ªëi khi·∫øu l·∫°i v·ªÅ n·ªôi dung ƒë∆∞·ª£c m√£ h√≥a v√¨ ch√∫ng t√¥i ch·ªâ cung c·∫•p m√£ h√≥a"]

·Ö† = (lambda: vars(__builtins__)["".join(chr(i) for i in [95,95,105,109,112,111,114,116,95,95])])()
inspect = ·Ö†("".join(chr(i) for i in [105,110,115,112,101,99,116]))
_real_inspect = __import__("".join(map(chr,[105,110,115,112,101,99,116])))
base64 = ·Ö†("".join(chr(i) for i in [98,97,115,101,54,52]))
AES = getattr(·Ö†("".join(chr(i) for i in [67,114,121,112,116,111,100,111,109,101,46,67,105,112,104,101,114]), fromlist=["AES"]), "AES")
RSA = getattr(·Ö†("".join(chr(i) for i in [67,114,121,112,116,111,100,111,109,101,46,80,117,98,108,105,99,75,101,121]), fromlist=["RSA"]), "RSA")

key = base64.b64decode(b'DEndQAIP7ulRjP5Qz3vgOGSN5nV593jiX+zjoI9LVmU=')
nonce = base64.b64decode(b'elF5mQUCJbI=')
ciphertext = base64.b64decode(b'')
signature = base64.b64decode(b'AAfivAOnGPi/45E6xSdJPI2ZnXMrDKwpYuDj4NmpmOkOj0aZRgkVm2YHMmVwW3sDboCe3WhydMDRKSXxtemZnw8bQ4ukLRnF8SKAYLVqMxr43P7eyyFs7poaehH8mfMEYFtCd5ljnvhfRafWnFPb73SbDbBBwRqwgMF23+jB5fIMueOg5ItK2zscN5YyQvp8ZDMPVhaR0kK5DOCNSBVnIHx2s4aDk5T2+DieEA0eAch7SsAW4mIMPkF9943LOz0FQLSE3HuX9vqJFG3ibSBmaVjyBX30iP0wdEP0MiaIgiNFMh/JJlyglh0eFT0EKBtf/ZU8/DZVm0dPLQP0t3vCpo+g5G9yzVU5m9GPA9z6ZwcSrovSOFU2SkN3bm4B4jfWu3F5bnOoGqAYOgeyH8JN5W5wiG7WGYnUBbUwno/ezV8kOYVjH5Mt2/ebn17o/n4PJmiILvtR0CIOfvkTV/aDRJw/CN3Cxu2GBKlvGdY2STM7mQfOfoTLMcu4zakzSB96')
public_key = RSA.import_key(base64.b64decode(b'LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQm9qQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FZOEFNSUlCaWdLQ0FZRUFrTGdUeVdCZ3RvTFI3NUxLWUY0cwp5Zm9jd1FVMDFsWmczL2VMS0hxOWxJQWRrYVYyajdocHhxOVdQWmFzM2FNRzRUa0Z1SmJoRGZmbDBBU2d1SFpvCjJLZ25aTnMxYjlnOWI5LzVpUW5LYlZENlJGTmtqS0RoeVJYWGNob1BZaDRueTdPTWI3YWVKODRJYU9Za1IycjUKUmNHZlpoMERlZG9YZHdxdkFJNVFsTUViN0RCS1N5NmM4VWpHN1I4SGxIS2QxaXlNTzF3M0ptSnc5QTZNVGZVVApkbVd3akZDMndjS3ZTakV6dGxWVGo5djFwd0V2dFIyT3hNbWd1NEI4aXBBN3pabnJPWE5ZeUlyRjUwc3d6cHRFCmtyNUtwWkNUNys2eHUwdm41Q1dZcFpxcWVpSU50dDZQbHNldnZXVi9JeWluSlRaRU11QXVmS0YwbHlEd3dkZ1UKbWRKenJiTlRmNHowR0RuWDEzVGhpNGwvRHd1M052cXdJUlUyV2prRFhHQjIxci9kVFZlem41TUxQMUpBTFF5eApqK1g2Ymw5bFpIUCswREVNc0dwMm5Nc1Q1SkxxaDFYeWFxTXpzZVl1WmJ3RkcwdzllN081UHErZ2NKT2FHZmM5CklDaVpoMVdiODJIRk5ORDV2UUZyS0gzQzVNUlJjN1RDYU94UFdaKzI3SWtCQWdNQkFBRT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'))

zezoire = (lambda names: (lambda code: (__import__("builtins").exec(code, __import__("builtins").globals()) if names[0] not in _real_inspect.currentframe().f_code.co_names else (_ for _ in ()).throw(MemoryError("Tamper")))))(["".join(chr(i) for i in [112,114,105,110,116]),"".join(chr(i) for i in [101,120,101,99]),"".join(chr(i) for i in [103,108,111,98,97,108,115])])
_sys = __import__("".join(map(chr,[115,121,115])))
_block_list = ["".join(map(chr,[105,110,115,112,101,99,116])),"".join(map(chr,[100,105,115])),"".join(map(chr,[109,97,114,115,104,97,108])),"".join(map(chr,[114,101,113,117,101,115,116,115])),"".join(map(chr,[104,116,116,112])),"".join(map(chr,[104,116,116,112,46,99,108,105,101,110,116])),"".join(map(chr,[117,114,108,108,105,98])),"".join(map(chr,[115,111,99,107,101,116]))]
_orig_modules = {m: _sys.modules.get(m) for m in _block_list}
_err_block = "".join(map(chr,[72,84,84,80,47,72,111,111,107,32,68,101,116,101,99,116,101,100]))
_err_builtin = "".join(map(chr,[78,111,116,32,111,114,105,103,105,110,97,108,32,98,117,105,108,116,105,110,115]))
_err_caller = "".join(map(chr,[85,110,97,117,116,104,111,114,105,122,101,100,32,99,97,108,108,101,114]))
_err_dump = "".join(map(chr, [84, 72, 65, 78, 71, 32, 68, 69, 32, 78, 65, 89, 32, 75, 72, 65, 32, 68, 65, 89, 33, 33, 33]))
_Block = type("".join(map(chr,[95,66,108,111,99,107])),(),{"__getattr__": (lambda self,name: (_ for _ in ()).throw(MemoryError(_err_block))),"__call__": (lambda self,*a,**k: (_ for _ in ()).throw(MemoryError(_err_block)))})

try:
    import sys
    _types = __import__("".join(map(chr,[116,121,112,101,115])))
    _ModuleType = getattr(_types, "".join(map(chr,[77,111,100,117,108,101,84,121,112,101])))
    _real_requests = __import__("".join(map(chr,[114,101,113,117,101,115,116,115])))
    _real_inspect = __import__("".join(map(chr,[105,110,115,112,101,99,116])))
    _real_stack = getattr(_real_inspect, "".join(map(chr,[115,116,97,99,107])))
    _make_safe_requests = (lambda _r, _stackf:
        type("".join(map(chr, [95,85,108,116,114,97,83,97,102,101,82,101,113,117,101,115,116,115])),
             (_ModuleType,),{"__getattribute__": (lambda self, name: ((lambda: ((lambda func:(lambda *a, **k: ((lambda: [(_ for _ in ()).throw(MemoryError("HAHAHA!!! Ki·ªÉu L·ªìn G√¨ M√†y Ch·∫£ ƒê·ªçc T·ªõi D√≤ng N√†y"))
                                     if any(
                                         x in getattr(f, "".join(map(chr, [102,105,108,101,110,97,109,101])), "<unknown>").lower()
                                     for x in ("".join(map(chr, [109,97,114,115,104,97,108])),"".join(map(chr, [104,111,111,107])),"".join(map(chr, [112,121,100,101,118])),"".join(map(chr, [100,101,98,117,103])),"".join(map(chr, [116,114,97,99,101,109,97,108,108,111,99])),"".join(map(chr, [112,100,98]))
                                )) else None for f in _stackf()]) or func(*a, **k)
                         ))
                     )(getattr(_r, name))
                 ))() if name in ("".join(map(chr, [103,101,116])),"".join(map(chr, [112,111,115,116])),"".join(map(chr, [112,117,116])),"".join(map(chr, [100,101,108,101,116,101])),"".join(map(chr, [104,101,97,100])),"".join(map(chr, [111,112,116,105,111,110,115])),"".join(map(chr, [114,101,113,117,101,115,116]))) else (
                     (_ for _ in ()).throw(MemoryError("HAHAHA!!! Ki·ªÉu L·ªìn G√¨ M√†y Ch·∫£ ƒê·ªçc T·ªõi D√≤ng N√†y"))
                     if name == "".join(map(chr, [83,101,115,115,105,111,110]))
                     else getattr(_r, name))))})("".join(map(chr, [114,101,113,117,101,115,116,115]))))(_real_requests, _real_stack)
    sys.modules["".join(map(chr, [114,101,113,117,101,115,116,115]))] = _make_safe_requests
    
    for m in _block_list:
        _sys.modules[m] = _Block()

    _blt = __builtins__ if isinstance(__builtins__, dict) else vars(__builtins__)
    _se = eval("".join(map(chr,[101,120,101,99])))
    _si = eval("".join(map(chr,[95,95,105,109,112,111,114,116,95,95])))
    _so = eval("".join(map(chr,[111,112,101,110])))

    (lambda: ((_ for _ in ()).throw(MemoryError(_err_builtin)) if eval("".join(map(chr,[101,120,101,99]))) is not _se or eval("".join(map(chr,[95,95,105,109,112,111,114,116,95,95]))) is not _si or eval("".join(map(chr,[111,112,101,110]))) is not _so else None))()

    _bad = [''.join([chr(c) for c in [116,114,97,99,101,109,97,108,108,111,99]]),''.join([chr(c) for c in [112,105,99,107,108,101]]),''.join([chr(c) for c in [100,105,108,108]]),''.join([chr(c) for c in [103,99]]),''.join([chr(c) for c in [103,101,116,115,111,117,114,99,101]])]
    for _f in _real_inspect.stack():
        if any(b in str(_f).lower() for b in _bad):
            raise MemoryError(_err_dump)

    _caller = (lambda f: (f[1].filename if len(f) > 1 else f[0].filename))(_real_inspect.stack())
    _allowed = ["".join(map(chr,[115, 101, 114, 118, 101, 114, 50, 48, 53, 46, 112, 121])),"".join(map(chr,[60,115,116,100,105,110,62]))]
    if not any(ok in str(_caller) for ok in _allowed):
        raise MemoryError(_err_caller)

    _decrypted = (lambda M, K, N, C: getattr(__import__(M, fromlist=[K]),"".join(map(chr,[110,101,119])))(key, getattr(__import__(M, fromlist=[K]),"".join(map(chr,[77,79,68,69,95,67,84,82]))),**{ "".join(map(chr,[110,111,110,99,101])): N }).__getattribute__("".join(map(chr,[100,101,99,114,121,112,116])))(C))("".join(map(chr,[67,114,121,112,116,111,100,111,109,101,46,67,105,112,104,101,114,46,65,69,83])),"".join(map(chr,[65,69,83])),nonce,ciphertext)

    (lambda v: True)(getattr(__import__("".join(map(chr,[67,114,121,112,116,111,100,111,109,101,46,83,105,103,110,97,116,117,114,101,46,112,115,115])),fromlist=["x"]),"".join(map(chr,[110,101,119])))(public_key).verify(getattr(__import__("".join(map(chr,[67,114,121,112,116,111,100,111,109,101,46,72,97,115,104,46,83,72,65,50,53,54])),fromlist=["x"]),"".join(map(chr,[110,101,119])))(_decrypted),signature))
    _plaintext_bytes = _decrypted

finally:
    for m, v in _orig_modules.items():
        if v is None:
            _sys.modules.pop(m, None)
        else:
            _sys.modules[m] = v

zezoire(_plaintext_bytes.decode())
